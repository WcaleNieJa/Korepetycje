#include <bits/stdc++.h>
using namespace std;
const int stala = 262144;
long long Drzewo[stala][2];//0 to wynik, 1 to indeks
int n,m;
long long Odl[stala];
long long Odwiedzonosc[stala];

struct para{
    int miasto;
    int odl;
    };
vector <para> T[100001];
vector <int> Ojcowie[100001];

void initalize_drzewo(){
    for (int i=0; i < stala;i++){
        Drzewo[i][0]=-1;
    }
    for (int i=stala/2;i < stala;i++){
        Drzewo[i][1]=i-stala/2+1;
    }
    for (int i=stala/2-1;i > 0;i--){
        Drzewo[i][1]=Drzewo[2*i][1];
    }
}
void update(int miejsce,long long wartosc){
    miejsce = miejsce + stala/2 - 1;
    Drzewo[miejsce][0]=wartosc;
    while (miejsce != 0){
        miejsce = miejsce/2;
        if ((Drzewo[2*miejsce][0] != -1 && Drzewo[2*miejsce][0] < Drzewo[2*miejsce+1][0]) || Drzewo[2*miejsce+1][0] == -1){
            Drzewo[miejsce][0]=Drzewo[2*miejsce][0];
            Drzewo[miejsce][1]=Drzewo[2*miejsce][1];
        }
        else{
            Drzewo[miejsce][0]=Drzewo[2*miejsce+1][0];
            Drzewo[miejsce][1]=Drzewo[2*miejsce+1][1];
        }
    }
}

void Djikstra(){
    update(1,0);
    Odl[0]=0;
    while(Drzewo[1][0] != -1){
        int id = Drzewo[1][1];
        Odl[id]=Drzewo[stala/2+id-1][0];
        Odwiedzonosc[id]=2;
        for (int i=0; i < T[id].size();i++){
            if(Odwiedzonosc[T[id][i].miasto]!=2){//jeszcze nie zapisalismy
                if(Odwiedzonosc[T[id][i].miasto]==0){//jesli jeszcze nie bylismy w
                    Odwiedzonosc[T[id][i].miasto]=1;
                    Odl[T[id][i].miasto]=Odl[id]+T[id][i].odl;
                    Ojcowie[T[id][i].miasto].push_back(id);
                    update(T[id][i].miasto,Drzewo[id+stala/2-1][0]+T[id][i].odl);
                }
                else{//jesli juz bylismy
                    if(Odl[T[id][i].miasto]>Odl[id]+T[id][i].odl){
                        Ojcowie[T[id][i].miasto].clear();
                        Odl[T[id][i].miasto]=Odl[id]+T[id][i].odl;
                    }
                    update(T[id][i].miasto,Odl[T[id][i].miasto]);
                    Ojcowie[T[id][i].miasto].push_back(id);
                }
            }
        }
        update(id,-1);
        }
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >> m;
    for (int i=0; i < m;i++){
        int temp1,temp2,temp3;
        cin >> temp1 >> temp2 >> temp3;
        para temp4;
        temp4.odl = temp3;
        temp4.miasto = temp2;
        T[temp1].push_back(temp4);
        temp4.miasto = temp1;
        T[temp2].push_back(temp4);
    }
    for (int i=1; i <= n;i++){
        Odwiedzonosc[i]=0;
    }
    initalize_drzewo();
    Djikstra();
//    for(int i=1; i <= n;i++){
//        for (int j = 0; j < Ojcowie[i].size();j++){
//            cout << Ojcowie[i][j] << " ";
//        }
//        cout << " x " << i << endl;
//    }

    int Ojc_wyn[n];
    for (int i=1;i <= n;i++){
        Ojc_wyn[i]=0;
    }
    Ojc_wyn[n]=1;
    queue <int> Kolejka;
    Kolejka.push(n);
    while (Kolejka.size()>0){
        int s = Kolejka.front();
        for (int i=0; i < Ojcowie[s].size();i++){
            if(Ojc_wyn[Ojcowie[s][i]]==0){
                Ojc_wyn[Ojcowie[s][i]]=1;
                if (Ojcowie[s][i] != 1){
                    Kolejka.push(Ojcowie[s][i]);
                }
            }
        }
        Kolejka.pop();
    }
    if(Ojc_wyn[1] == 1){
        for (int i=1; i <= n;i++){
            if(Ojc_wyn[i]==1){
                cout << i << endl;
            }
        }
    }
}
